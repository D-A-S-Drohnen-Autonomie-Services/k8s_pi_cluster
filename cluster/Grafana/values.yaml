## Expose the grafana service to be accessed from outside the cluster (LoadBalancer service).
## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
## ref: http://kubernetes.io/docs/user-guide/services/
##
service:
  enabled: true
  type: LoadBalancer
  port: 80
  targetPort: 3000
  # targetPort: 4181 To be used with a proxy extraContainer
  ## Service annotations. Can be templated.
  annotations: {}
  labels: {}
  portName: service
  # Adds the appProtocol field to the service. This allows to work with istio protocol selection. Ex: "http" or "tcp"
  appProtocol: ""

# Administrator credentials when not using an existing secret (see below)
adminUser: admin
adminPassword: admin

# Use an existing secret for the admin user.
admin:
  ## Name of the secret. Can be templated.
  existingSecret: ""
  userKey: admin-user
  passwordKey: admin-password

## Configure grafana datasources
## ref: http://docs.grafana.org/administration/provisioning/#datasources
##
datasources:
  datasources.yaml:
    apiVersion: 1
    datasources:
    - name: kube-prometheus
      type: prometheus
      url: http://kube-prometheus.dastech.local:9090
      access: proxy
      isDefault: true
#    - name: CloudWatch
#      type: cloudwatch
#      access: proxy
#      uid: cloudwatch
#      editable: false
#      jsonData:
#        authType: default
#        defaultRegion: us-east-1
#    deleteDatasources: []
#    - name: Prometheus

dashboardProviders:
  dashboardproviders.yaml:
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default

dashboards:
  default:
    kube-monitoring:
      gnetId: 315
      datasource: kube-prometheus
      revision: 3
    alertmanager-overview:
      file: dashboards/alertmanager-overview.json
    apiserver:
      file: dashboards/apiserver.json
    cluster-total:
      file: dashboards/cluster-total.json
    controller-manager:
      file: dashboards/controller-manager.json
    etcd:
      file: dashboards/etcd.json
    grafana-overview:
      file: dashboards/grafana-overview.json
    k8s-coredns:
      file: dashboards/k8s-coredns.json
    k8s-resources-cluster:
      file: dashboards/k8s-resources-cluster.json
    k8s-resources-multicluster:
      file: dashboards/k8s-resources-multicluster.json
    k8s-resources-namespace:
      file: dashboards/k8s-resources-namespace.json
    k8s-resources-node:
      file: dashboards/k8s-resources-node.json
    k8s-resources-pod:
      file: dashboards/k8s-resources-pod.json
    k8s-resources-windows-cluster:
      file: dashboards/k8s-resources-windows-cluster.json
    k8s-resources-windows-namespace:
      file: dashboards/k8s-resources-windows-namespace.json
    k8s-resources-windows-pod:
      file: dashboards/k8s-resources-windows-pod.json
    k8s-resources-workload:
      file: dashboards/k8s-resources-workload.json
    k8s-resources-workloads-namespace:
      file: dashboards/k8s-resources-workloads-namespace.json
    k8s-windows-cluster-rsrc-use:
      file: dashboards/k8s-windows-cluster-rsrc-use.json
    k8s-windows-node-rsrc-use:
      file: dashboards/k8s-windows-node-rsrc-use.json
    kubelet:
      file: dashboards/kubelet.json
    namespace-by-pod:
      file: dashboards/namespace-by-pod.json
    namespace-by-workload:
      file: dashboards/namespace-by-workload.json
    nodes:
      file: dashboards/nodes.json
    persistentvolumesusage:
      file: dashboards/persistentvolumesusage.json
    pod-total:
      file: dashboards/pod-total.json
    prometheus-remote-write:
      file: dashboards/prometheus-remote-write.json
    prometheus:
      file: dashboards/prometheus.json
    proxy:
      file: dashboards/proxy.json
    scheduler:
      file: dashboards/scheduler.json
    workload-total:
      file: dashboards/workload-total.json

  # default:
  #   some-dashboard:
  #     json: |
  #       $RAW_JSON
  #   custom-dashboard:
  #     file: dashboards/custom-dashboard.json
  #   prometheus-stats:
  #     gnetId: 2
  #     revision: 2
  #     datasource: Prometheus
  #   local-dashboard:
  #     url: https://example.com/repository/test.json
  #     token: ''
  #   local-dashboard-base64:
  #     url: https://example.com/repository/test-b64.json
  #     token: ''
  #     b64content: true
  #   local-dashboard-gitlab:
  #     url: https://example.com/repository/test-gitlab.json
  #     gitlabToken: ''
  #   local-dashboard-bitbucket:
  #     url: https://example.com/repository/test-bitbucket.json
  #     bearerToken: ''
  #   local-dashboard-azure:
  #     url: https://example.com/repository/test-azure.json
  #     basic: ''
#     acceptHeader: '*/*'